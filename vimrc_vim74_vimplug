" vimrc conf file for vim and vim-plug

" color schemes require 256-bit gnome-terminal
set t_Co=256

set nocompatible              " required

filetype off                  " required

" Specify a directory for plugins
"  - For Neovim: ~/.local/share/nvim/plugged
"  - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" All of your Plugins must be added before the following line

"Code Folding
Plug 'tmhedberg/SimpylFold'

"Auto-Indentation
Plug 'vim-scripts/indentpython.vim'
"Python autocomplete
Plug 'davidhalter/jedi-vim'
"Python sytax checker
Plug 'scrooloose/syntastic'
"PEP8 checking
Plug 'nvie/vim-flake8'
"Colors
Plug 'flazz/vim-colorschemes'
Plug 'jnurmine/Zenburn'
Plug 'altercation/vim-colors-solarized'
"Ctrl-n to enable filesystem
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
"Plug 'scrooloose/nerdcommenter'
Plug 'jistr/vim-nerdtree-tabs'
"Ctrl-P to enable the search and then just start typing
Plug 'kien/ctrlp.vim'
Plug 'tpope/vim-fugitive'
"status bar that displays things
Plug 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
"markdown plugins
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
"latex plugin
Plug 'lervag/vimtex'
" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
" Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
" Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" Multiple Plug commands can be written in a single line using | separators
" Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
"
" On-demand loading
" Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
"
" Using a non-master branch
" Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
"
" Plug 'fatih/vim-go', { 'tag': '*' }
"
" Plugin options
" Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }
"
" Plugin outside ~/.vim/plugged with post-update hook
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
"
" Plug '~/my-prototype-plugin'
"
call plug#end()

filetype plugin indent on    " enables filetype detection

":sv <filename> and you split the layout vertically
":vs <filename> and you get a horizontal split
"specify different areas of the screen where the splits should occur
set splitbelow
set splitright
"move between the splits without using the mouse
"split navigations with Ctrl-k and Ctrl-j
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

map <C-n> :NERDTreeToggle<CR>
:let g:NERDTreeWinSize=19


"Enable folding
set foldmethod=indent
set foldlevel=99

"I don't like swap files
set noswapfile

" Enable folding with the spacebar
nnoremap <space> za

"tabs
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=100 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

set tabstop=4
set softtabstop=4
set shiftwidth=4

"Flagging Unnecessary Whitespace
"au BufRead,BufNewFile *.py,*.pyw,*.c,*.h
"create a new highlight group to highlight unwanted tabs and trailing spaces
highlight BadWhitespace ctermbg=red guibg=darkred
highlight UnwanttedTab ctermbg=red guibg=darkred
highlight TrailSpace guibg=red ctermbg=darkred
match BadWhitespace /\s\+$/
match UnwanttedTab /\t/
match TrailSpace / \+$/

autocmd ColorScheme * highlight BadWhitespace ctermbg=red guibg=darkred
autocmd ColorScheme * highlight UnwanttedTab ctermbg=red guibg=darkred
autocmd ColorScheme * highlight TrailSpace guibg=red ctermbg=darkred

set encoding=utf-8

"make your code look pretty
let python_highlight_all=1
syntax on

"Check out solarized for GUI mode, and Zenburn for terminal mode
if has('gui_running')
	set background=dark
	colorscheme solarized
else
	"colorscheme distinguished
	"colorscheme distinguished
	colorscheme zenburn
endif

" toggle background colour
call togglebg#map("<F5>")

"hide .pyc files
let NERDTreeIgnore=['\.pyc$', '\~$'] "ignore files in NERDTree

"see the docstrings for folded code
"let g:SimpylFold_docstring_preview=1

"Line Numbering
set nu

" make backspaces more powerfull
set backspace=indent,eol,start

"CUSTOM KEY MAPPINGS
"navigate between tabs
map <F8> :tabp<CR>
map <F9> :tabn<CR>
"map keys so python executes current script
map <C-s> :w<CR>:!python %<CR>
"map Ctrl+s to write file and run it by pyton
imap <C-s> <Esc>:w<CR>:!python %<CR>
"Enter to insert a new-line after the current line
"Ctrl-o for "inserting a line before the current line
"stay in the line where you have been before with "j" and "k"
nmap <C-o> O<Esc>j
nmap <CR> o<Esc>k
"comment lines easily in normal(command) mode
"with <F3> and <F4>
nmap <F3> 0i#<Space><Esc>h
nmap <F4> <End>a<Tab><Tab>#<Space>
"disable vimtex warnings
let g:vimtex_compiler_latexmk = {'callback' : 0}
" enable omnicompletion
filetype plugin on
set omnifunc=syntaxcomplete#Complete
imap <C-a> <C-X><C-O>
